// Generated by Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;

/**
  Achoices model implementation, included in any BaseModel
*/
SWIFT_CLASS("_TtC12AvocarrotSDK9AdChoices")
@interface AdChoices : NSObject <NSCoding>
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/**
  Returns the AdChoices icon url

  returns:
  the absolute String of the adChoices icon url
*/
- (NSString * _Nonnull)getIconUrl;
/**
  Returns the AdChoices redirection url

  returns:
  the absolute String of the adChoices redirection url
*/
- (NSString * _Nonnull)getRedirectionUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Used for error reporting
*/
SWIFT_CLASS("_TtC12AvocarrotSDK7AdError")
@interface AdError : NSObject
/**
  Returns the error description
  Returns: the error description String
*/
- (NSString * _Nonnull)getDescription;
/**
  Returns the error code
  Returns: the error code String
*/
- (NSString * _Nonnull)getCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  BaseModel Implementation
*/
SWIFT_CLASS("_TtC12AvocarrotSDK9BaseModel")
@interface BaseModel : NSObject <NSCoding>
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/**
  Initialize
*/
- (nonnull instancetype)initWithJsonObject:(NSDictionary<NSString *, id> * _Nonnull)jsonObject requestId:(NSString * _Nullable)requestId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AdModel implementation extending BaseModel
*/
SWIFT_CLASS("_TtC12AvocarrotSDK7AdModel")
@interface AdModel : BaseModel
/**

  returns:
  the ad description
*/
- (NSString * _Nonnull)getDescription;
/**

  returns:
  the call to action text
*/
- (NSString * _Nonnull)getCTAText;
/**

  returns:
  the destination url
*/
- (NSString * _Nonnull)getDestinationUrl;
/**

  returns:
  the title
*/
- (NSString * _Nonnull)getTitle;
/**

  returns:
  the start rating (range [0.0,5.0])
*/
- (double)getRating;
/**

  returns:
  the ad main image url
*/
- (NSString * _Nonnull)getImage;
/**

  returns:
  the ad icon image url
*/
- (NSString * _Nonnull)getIcon;
/**

  returns:
  the adchoices model if the ad has one
*/
- (AdChoices * _Nullable)getAdChoices;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithJsonObject:(NSDictionary<NSString *, id> * _Nonnull)jsonObject requestId:(NSString * _Nullable)requestId OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;
@class UIImageView;
@class UIButton;
@class UINib;

/**
  AvocarrotAdRendering Protocol
*/
SWIFT_PROTOCOL("_TtP12AvocarrotSDK20AvocarrotAdRendering_")
@protocol AvocarrotAdRendering
/**
  Return the UILabel that your view is using for the main text.

  returns:
  a UILabel that is used for the main text.
*/
- (UILabel * _Null_unspecified)getMainTextLabel;
/**
  Return the UILabel that your view is using for the title text.

  returns:
  a UILabel that is used for the title text.
*/
- (UILabel * _Null_unspecified)getTitleTextLabel;
/**
  Return the UIImageView that your view is using for the icon image.

  returns:
  a UIImageView that is used for the icon image.
*/
- (UIImageView * _Nullable)getIconImageView;
/**
  Return the UIImageView that your view is using for the main image.

  returns:
  a UIImageView that is used for the main image.
*/
- (UIImageView * _Null_unspecified)getMainImageView;
/**
  Returns the UILabel that your view is using for the call to action (cta) text.

  returns:
  a UILabel that is used for the cta text.
*/
- (UIButton * _Null_unspecified)getCallToAction;
/**
  Returns the UIImageView that your view is using for the privacy information icon.

  returns:
  a UIImageView that is used for the privacy information icon.
*/
- (UIImageView * _Nullable)getAdChoicesImageView;
/**
  This method is called if the ad contains a star rating.
  Implement this method if you expect and wish to display a star rating.
  <ul>
    <li>
      Parameter: starRating An Double that is a float in the range of 0.0f and 5.0f.
    </li>
  </ul>
*/
- (void)setStarRatingL:(double)starRating;
- (UINib * _Nullable)nibForAd;
@end

enum MediationType : NSInteger;
@class UIView;
@class TargetModel;
enum LogLevel : NSInteger;

/**
  Class that exposes AvocarrotCustom to Objc
*/
SWIFT_CLASS_NAMED("AvocarrotCustomObjc")
@interface AvocarrotCustom : NSObject
/**
  Initialize
*/
- (nonnull instancetype)initWithApiKey:(NSString * _Nonnull)apiKey placementKey:(NSString * _Nonnull)placementKey mediationType:(enum MediationType)mediationType OBJC_DESIGNATED_INITIALIZER;
/**
  Register callback to be called when ad is loaded
  \param adloaded a function with void return type and a AdModel as parameter

*/
- (AvocarrotCustom * _Nonnull)onAdLoaded:(void (^ _Nonnull)(NSArray<AdModel *> * _Nonnull))adloaded;
/**
  Register callback to be called on ad error
  \param adError a function with void return type and an AdError as parameter

*/
- (AvocarrotCustom * _Nonnull)onAdError:(void (^ _Nonnull)(AdError * _Nonnull))adError;
/**
  Register callback to be called when the ad view is clicked
  \param adViewClicked a function with void return type and an UIView as parameter

*/
- (AvocarrotCustom * _Nonnull)onAdViewClicked:(void (^ _Nonnull)(UIView * _Nonnull))adViewClicked;
/**
  Register callback to be called when the ad click is registered and tracked
  \param adClickRegistered a function with void return type

*/
- (AvocarrotCustom * _Nonnull)onAdClickRegistered:(void (^ _Nonnull)(void))adClickRegistered;
/**
  Register callback to be called when the adChoices view is clicked
  \param adChoicesClicked a function with void return type and an UIView as parameter

*/
- (AvocarrotCustom * _Nonnull)onAdChoicesClicked:(void (^ _Nonnull)(UIView * _Nonnull))adChoicesClicked;
/**
  Register callback to be called on ad impression
  \param adImpresion a function with void return type

*/
- (AvocarrotCustom * _Nonnull)onAdImpression:(void (^ _Nonnull)(void))adImpresion;
/**
  Register callback to be called when the webview closes
  \param adWebViewClosed a function with void return type

*/
- (AvocarrotCustom * _Nonnull)onAdWebViewClosed:(void (^ _Nonnull)(void))adWebViewClosed;
/**
  Adds targeting data to ad request
  \param targetModel a TargetModel instance

*/
- (AvocarrotCustom * _Nonnull)withTargetingData:(TargetModel * _Nonnull)targetModel;
/**
  Switch between sandbox and live mode
*/
- (AvocarrotCustom * _Nonnull)withSandbox:(BOOL)sandbox;
/**
  Set User logging level
  \param enableLogging true to enable logging

  \param logLevel the LogLevel of the logger

*/
- (AvocarrotCustom * _Nonnull)withLogging:(BOOL)enableLogging logLevel:(enum LogLevel)logLevel;
/**
  Loads the ad
  <ul>
    <li>
      Paremeter preloading:  does nothing at the moment
    </li>
  </ul>
*/
- (void)loadAd;
/**
  Binds the view and the model and registers them to the impression controller
  \param uiView the UIView that will be binded

  \param ad the BaseModel that will be binded

*/
- (void)bindView:(UIView * _Nonnull)view ad:(BaseModel * _Nonnull)ad;
/**
  Handles the click call to action, used when the user has his on click listener
  \param viewController the root UIViewController (optional)

  \param ad the BaseModel that is clicked

*/
- (void)handleClick:(BaseModel * _Nonnull)ad;
/**
  Adds a click listener to the adChoices view
  \param uiView the UIView that the listener is registered

  \param ad the BaseModel binded at this view

*/
- (void)registerAdChoicesListener:(UIView * _Nonnull)uiView ad:(BaseModel * _Nonnull)ad;
/**
  Removes click listener from the adChoices view
  \param uiView the UIView that has the click listener

*/
- (void)removeAdChoicesListener:(UIView * _Nonnull)uiView;
/**
  Adds a click listener to a view
  \param uiView the UIView that the listener is registered

  \param ad the BaseModel binded at this view

*/
- (void)registerClickListener:(UIView * _Nonnull)uiView ad:(BaseModel * _Nonnull)ad;
/**
  Removes click listener from the view
  \param uiView the UIView that has the click listener

*/
- (void)removeClickListener:(UIView * _Nonnull)uiView;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UITableView;
@class UITableViewCell;

SWIFT_CLASS("_TtC12AvocarrotSDK17AvocarrotInstream")
@interface AvocarrotInstream : NSObject <UITableViewDelegate, UITableViewDataSource>
- (nonnull instancetype)initWithApiKey:(NSString * _Nonnull)apiKey placementKey:(NSString * _Nonnull)placementKey mediationType:(enum MediationType)mediationType OBJC_DESIGNATED_INITIALIZER;
- (AvocarrotInstream * _Nonnull)withRenderingClass:(Class _Nonnull)renderingClass;
- (AvocarrotInstream * _Nonnull)withFrequency:(NSInteger)adStart adFrequency:(NSInteger)adFrequency;
/**
  Adds targeting data to ad request
  \param targetModel a TargetModel instance

*/
- (AvocarrotInstream * _Nonnull)withTargetingData:(TargetModel * _Nonnull)targetModel;
- (AvocarrotInstream * _Nonnull)withSandbox:(BOOL)sandbox;
- (AvocarrotInstream * _Nonnull)withLogging:(BOOL)enable level:(enum LogLevel)level;
/**
  Register callback to be called when ad is loaded
  \param adloaded a function with void return type and a AdModel as parameter

*/
- (AvocarrotInstream * _Nonnull)onAdLoaded:(void (^ _Nonnull)(NSArray<AdModel *> * _Nonnull))adloaded;
/**
  Register callback to be called on ad error
  \param adError a function with void return type and an AdError as parameter

*/
- (AvocarrotInstream * _Nonnull)onAdError:(void (^ _Nonnull)(AdError * _Nonnull))adError;
/**
  Register callback to be called when the ad view is clicked
  \param adViewClicked a function with void return type and an UIView as parameter

*/
- (AvocarrotInstream * _Nonnull)onAdViewClicked:(void (^ _Nonnull)(UIView * _Nonnull))adViewClicked;
/**
  Register callback to be called when the ad click is registered and tracked
  \param adClickRegistered a function with void return type

*/
- (AvocarrotInstream * _Nonnull)onAdClickRegistered:(void (^ _Nonnull)(void))adClickRegistered;
/**
  Register callback to be called when the adChoices view is clicked
  \param adChoicesClicked a function with void return type and an UIView as parameter

*/
- (AvocarrotInstream * _Nonnull)onAdChoicesClicked:(void (^ _Nonnull)(UIView * _Nonnull))adChoicesClicked;
/**
  Register callback to be called on ad impression
  \param adImpresion a function with void return type

*/
- (AvocarrotInstream * _Nonnull)onAdImpression:(void (^ _Nonnull)(void))adImpresion;
/**
  Register callback to be called when the webview closes
  \param adWebViewClosed a function with void return type

*/
- (AvocarrotInstream * _Nonnull)onAdWebViewClosed:(void (^ _Nonnull)(void))adWebViewClosed;
- (NSIndexPath * _Nonnull)normalizeToAdIndexPath:(NSIndexPath * _Nonnull)originalIndexPath;
- (NSArray<NSIndexPath *> * _Nonnull)normalizeToAdIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)originalIndexPaths;
- (NSIndexPath * _Nonnull)normalizeToOriginalIndexPath:(NSIndexPath * _Nonnull)adIndexPath;
- (NSArray<NSIndexPath *> * _Nonnull)normalizeToOriginalIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)adIndexPaths;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)tableView:(UITableView * _Nonnull)tableView canEditRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)tableView:(UITableView * _Nonnull)tableView canMoveRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView moveRowAtIndexPath:(NSIndexPath * _Nonnull)sourceIndexPath toIndexPath:(NSIndexPath * _Nonnull)destinationIndexPath;
- (void)bindTableView:(UITableView * _Nonnull)tableView;
- (void)unBindTableView:(UITableView * _Nonnull)tableView;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didEndDisplayingCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)tableView:(UITableView * _Nonnull)tableView shouldHighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didHighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didUnhighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willDeselectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didDeselectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCellEditingStyle)tableView:(UITableView * _Nonnull)tableView editingStyleForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)tableView:(UITableView * _Nonnull)tableView shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willBeginEditingRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didEndEditingRowAtIndexPath:(NSIndexPath * _Nullable)indexPath;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView indentationLevelForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)tableView:(UITableView * _Nonnull)tableView shouldShowMenuForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)tableView:(UITableView * _Nonnull)tableView canPerformAction:(SEL _Nonnull)action forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath withSender:(id _Nullable)sender;
- (void)tableView:(UITableView * _Nonnull)tableView performAction:(SEL _Nonnull)action forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath withSender:(id _Nullable)sender;
- (void)updateVisibleRows;
- (BOOL)respondsToSelector:(SEL _Nonnull)aSelector;
- (id _Nullable)forwardingTargetForSelector:(SEL _Nonnull)aSelector;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Class that exposes AvocarrotInterstitial to Objc
*/
SWIFT_CLASS_NAMED("AvocarrotInterstitialObjc")
@interface AvocarrotInterstitial : NSObject
/**
  Initialize
*/
- (nonnull instancetype)initWithApiKey:(NSString * _Nonnull)apiKey placementKey:(NSString * _Nonnull)placementKey mediationType:(enum MediationType)mediationType OBJC_DESIGNATED_INITIALIZER;
/**
  Loads the ad
  <ul>
    <li>
      Paremeter preloading:  does nothing at the moment
    </li>
  </ul>
*/
- (void)loadAd:(NSInteger)slot preloading:(BOOL)preloading forceRequest:(BOOL)forceRequest;
/**
  Loads the ad
  <ul>
    <li>
      Paremeter preloading:  does nothing at the moment
    </li>
  </ul>
*/
- (void)loadAd;
/**
  Shows Interstitial modal dialog
*/
- (void)showAd;
/**
  Loads ad and shows Interstitial modal dialog
*/
- (void)loadAndShowAd;
/**
  Register callback to be called when ad is loaded
  \param adloaded a function with void return type and a AdModel as parameter

*/
- (AvocarrotInterstitial * _Nonnull)onAdLoaded:(void (^ _Nonnull)(NSArray<AdModel *> * _Nonnull))adloaded;
/**
  Register callback to be called on ad error
  \param adError a function with void return type and an AdError as parameter

*/
- (AvocarrotInterstitial * _Nonnull)onAdError:(void (^ _Nonnull)(AdError * _Nonnull))adError;
/**
  Register callback to be called when the ad view is clicked
  \param adViewClicked a function with void return type and an UIView as parameter

*/
- (AvocarrotInterstitial * _Nonnull)onAdViewClicked:(void (^ _Nonnull)(UIView * _Nonnull))adViewClicked;
/**
  Register callback to be called when the ad click is registered and tracked
  \param adClickRegistered a function with void return type

*/
- (AvocarrotInterstitial * _Nonnull)onAdClickRegistered:(void (^ _Nonnull)(void))adClickRegistered;
/**
  Register callback to be called when the adChoices view is clicked
  \param adChoicesClicked a function with void return type and an UIView as parameter

*/
- (AvocarrotInterstitial * _Nonnull)onAdChoicesClicked:(void (^ _Nonnull)(UIView * _Nonnull))adChoicesClicked;
/**
  Register callback to be called on ad impression
  \param adImpresion a function with void return type

*/
- (AvocarrotInterstitial * _Nonnull)onAdImpression:(void (^ _Nonnull)(void))adImpresion;
/**
  Register callback to be called when the webview closes
  \param adWebViewClosed a function with void return type

*/
- (AvocarrotInterstitial * _Nonnull)onAdWebViewClosed:(void (^ _Nonnull)(void))adWebViewClosed;
/**
  Register callback to be called when the the ad is shown in the interstitial
  \param adDisplayed a function with void return type

*/
- (AvocarrotInterstitial * _Nonnull)onAdDisplayed:(void (^ _Nonnull)(void))adDisplayed;
/**
  Register callback to be called when the interstitial closes
  \param adDisplayed a function with void return type

*/
- (AvocarrotInterstitial * _Nonnull)onAdDismissed:(void (^ _Nonnull)(void))adDismissed;
/**
  Adds targeting data to ad request
  \param targetModel a TargetModel instance

*/
- (AvocarrotInterstitial * _Nonnull)withTargetingData:(TargetModel * _Nonnull)targetModel;
/**
  Switch between sandbox and live mode
*/
- (AvocarrotInterstitial * _Nonnull)withSandbox:(BOOL)sandbox;
/**
  Set User logging level
  \param enableLogging true to enable logging

  \param logLevel the LogLevel of the logger

*/
- (AvocarrotInterstitial * _Nonnull)withLogging:(BOOL)enableLogging logLevel:(enum LogLevel)logLevel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC12AvocarrotSDK6Bounds")
@interface Bounds : NSObject
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AvocarrotSDK11ContentMode")
@interface ContentMode : NSObject
- (UIViewContentMode)getContentMode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  Gender type based on the <a href="http://openrtb.github.io/OpenRTB/">OpenRTB</a> standard
*/
typedef SWIFT_ENUM(NSInteger, Gender) {
/**
  Male Gender
*/
  GenderMale = 0,
/**
  Male Gender
*/
  GenderFemale = 1,
/**
  Male Gender
*/
  GenderOther = 2,
};

/**
  Used to set the logging level to a Logger object
*/
typedef SWIFT_ENUM(NSInteger, LogLevel) {
/**
  Log errors only
*/
  LogLevelError = 0,
/**
  Log errors only
*/
  LogLevelWarning = 1,
/**
  Log errors only
*/
  LogLevelInfo = 2,
/**
  Log errors only
*/
  LogLevelDebug = 3,
};

/**
  MediationType implementation
*/
typedef SWIFT_ENUM(NSInteger, MediationType) {
/**
  No Mediation
*/
  MediationTypeNoMediation = 0,
/**
  No Mediation
*/
  MediationTypeMopub = 1,
};


SWIFT_CLASS("_TtC12AvocarrotSDK7Padding")
@interface Padding : NSObject
- (UIEdgeInsets)getInsets;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  RenderingKey implementation
*/
typedef SWIFT_ENUM(NSInteger, RenderingKey) {
  RenderingKeyMainText = 0,
  RenderingKeyTitleText = 1,
  RenderingKeyIconImage = 2,
  RenderingKeyMainImage = 3,
  RenderingKeyCallToAction = 4,
  RenderingKeyAdChoices = 5,
  RenderingKeyRating = 6,
};

/**
  StatusCode implementation
*/
typedef SWIFT_ENUM(NSInteger, StatusCode) {
/**
  Success status
*/
  StatusCodeSuccess = 0,
/**
  Success status
*/
  StatusCodeSuccessEmpty = 1,
/**
  Success status
*/
  StatusCodeForbidden = 2,
/**
  Success status
*/
  StatusCodeNotFound = 3,
/**
  Success status
*/
  StatusCodeNoInternetConnection = 4,
/**
  Success status
*/
  StatusCodeNoAdServed = 5,
};


/**
  Targeting model implementation used to keep targeting data
*/
SWIFT_CLASS("_TtC12AvocarrotSDK11TargetModel")
@interface TargetModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  TargetModelBuilder implementation used to build TargetModels
*/
SWIFT_CLASS("_TtC12AvocarrotSDK18TargetModelBuilder")
@interface TargetModelBuilder : NSObject
/**
  Sets the year of birth to the target model
*/
- (TargetModelBuilder * _Nonnull)withYearOfBirth:(NSInteger)yearOfBirth;
/**
  Sets the gender to the target model
*/
- (TargetModelBuilder * _Nonnull)withGender:(enum Gender)gender;
/**
  Sets the age to the target model
*/
- (TargetModelBuilder * _Nonnull)withAge:(NSInteger)age;
/**
  Builds the TargetModel
  Returns: a TargetModel object
*/
- (TargetModel * _Nonnull)build;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AvocarrotSDK13TextAlignment")
@interface TextAlignment : NSObject
- (NSTextAlignment)getAlignment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIColor;
@class NSNumber;
@class UIImage;

@interface UIButton (SWIFT_EXTENSION(AvocarrotSDK))
- (void)setText:(NSString * _Nonnull)text;
- (void)setTextColor:(UIColor * _Nonnull)color;
- (void)setTextSize:(NSNumber * _Nonnull)size;
- (void)setTextBold;
- (void)setImage:(UIImage * _Nonnull)image;
- (void)setPadding:(Padding * _Nonnull)padding;
- (void)loadImage:(NSString * _Nonnull)urlString onImageLoad:(void (^ _Nullable)(void))onImageLoad onImageLoadError:(void (^ _Nullable)(NSString * _Nonnull))onImageLoadError;
@end


@interface UIColor (SWIFT_EXTENSION(AvocarrotSDK))
@end

@class NSError;

@interface UIImageView (SWIFT_EXTENSION(AvocarrotSDK))
/**
  Loads the specific image url into @self.
  \param urlString absolute string of the image url

  \param scaleToImageSize if true the container (@self) trims to image size

  \param onImageLoad callback called when image successfully loads

  \param onImageLoadError callback called on every error except NSURLErrorCancelled

*/
- (void)loadImage:(NSString * _Nonnull)urlString scaleToImageSize:(BOOL)scaleToImageSize onImageLoad:(void (^ _Nullable)(void))onImageLoad onImageLoadError:(void (^ _Nullable)(NSError * _Nonnull))onImageLoadError;
- (void)matchImageSize:(UIImage * _Nonnull)image;
@end


@interface UILabel (SWIFT_EXTENSION(AvocarrotSDK))
- (void)setTextSize:(NSNumber * _Nonnull)size;
- (void)setTextBold;
- (void)setVTextAlignment:(TextAlignment * _Nonnull)alignment;
@end


@interface UITableView (SWIFT_EXTENSION(AvocarrotSDK))
- (void)av_setDataSource:(id <UITableViewDataSource> _Nonnull)dataSource;
@property (nonatomic, readonly, strong) id <UITableViewDataSource> _Nullable av_dataSource;
- (void)av_reloadData;
- (CGRect)av_rectForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSIndexPath * _Nonnull)av_indexPathForRowAtPoint:(CGPoint)point;
- (NSIndexPath * _Nullable)av_indexPathForCell:(UITableViewCell * _Nonnull)cell;
- (NSArray<NSIndexPath *> * _Nullable)av_indexPathsForRowsInRect:(CGRect)rect;
- (UITableViewCell * _Nullable)av_cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@property (nonatomic, readonly, copy) NSArray<UITableViewCell *> * _Nonnull av_visibleCells;
@property (nonatomic, readonly, copy) NSArray<NSIndexPath *> * _Nullable av_indexPathsForVisibleRows;
- (void)av_scrollToRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath atScrollPosition:(UITableViewScrollPosition)atScrollPosition animated:(BOOL)animated;
- (void)av_beginUpdates;
- (void)av_endUpdates;
- (void)av_insertSections:(NSIndexSet * _Nonnull)sections withRowAnimation:(UITableViewRowAnimation)withRowAnimation;
- (void)av_deleteSections:(NSIndexSet * _Nonnull)sections withRowAnimation:(UITableViewRowAnimation)withRowAnimation;
- (void)av_reloadSections:(NSIndexSet * _Nonnull)sections withRowAnimation:(UITableViewRowAnimation)withRowAnimation;
- (void)av_moveSection:(NSInteger)section toSection:(NSInteger)toSection;
- (void)av_insertRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths withRowAnimation:(UITableViewRowAnimation)withRowAnimation;
- (void)av_deleteRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths withRowAnimation:(UITableViewRowAnimation)withRowAnimation;
- (void)av_reloadRowsAtIndexPaths:(NSArray<NSIndexPath *> * _Nonnull)indexPaths withRowAnimation:(UITableViewRowAnimation)withRowAnimation;
- (void)av_moveRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath toIndexPath:(NSIndexPath * _Nonnull)toIndexPath;
@property (nonatomic, readonly, copy) NSIndexPath * _Nullable av_indexPathForSelectedRow;
@property (nonatomic, readonly, copy) NSArray<NSIndexPath *> * _Nullable av_indexPathsForSelectedRows;
- (void)av_selectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath animated:(BOOL)animated scrollPosition:(UITableViewScrollPosition)scrollPosition;
- (void)av_deselectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath animated:(BOOL)animated;
- (UITableViewCell * _Nonnull)av_dequeueReusableCellWithIdentifier:(NSString * _Nonnull)identifier forIndexPath:(NSIndexPath * _Nonnull)forIndexPath;
@end


@interface UIView (SWIFT_EXTENSION(AvocarrotSDK))
- (void)setBoundsRect:(Bounds * _Nonnull)bounds;
- (void)setBorderColor:(UIColor * _Nonnull)color;
- (void)setBorderWidth:(CGFloat)width;
- (void)setPadding:(Padding * _Nonnull)padding;
- (void)setTranslatesAutoMaskIntoConstraints:(NSInteger)bool_;
- (void)setViewContentMode:(ContentMode * _Nonnull)contentMode;
@end

#pragma clang diagnostic pop
